" Settings

set nocompatible
set number 					" Line number
set relativenumber 			" Relative line number
set ignorecase				" case insensitive match
set showmatch				" show matching brackets
set ttyfast					" Faster scrolling
set clipboard=unnamedplus	" Make vim use system clipboard
set hlsearch				" Highlight search	
set incsearch				" incremental search
set shiftwidth=4			" Make autoindent match 4 spaces
set tabstop=4				" Defines width of a tab
set softtabstop=4 			" X spaces will define a tab
set expandtab 				" convert tabs to whitespace
set shiftwidth=4 			" autoindent width
set wildmenu				" menu at the bottom of vim
set wildmode=longest,list	" list of options, matches longest
set mouse=a					" mouse support on console
syntax on					" syntax highlighting
set cc=80                   " column border
set nowrap
set encoding=utf-8
set fileencoding=utf-8
set pumheight=10            " Popup menu size
set ruler                   " always display cursor
set cmdheight=2
set laststatus=0            " always display status
set background=dark         " tells vim what the background looks like
" set noshowmode            remove status like Insert
set nobackup
set nowritebackup
set title
set completeopt=menuone,noinsert,noselect   " Force intentional selection
set shortmess+=c            " Avoid extra messages
set scrolloff=10             " offset 10 lines from cursor
set backspace=indent,eol,start
set termguicolors


" Keymap
inoremap jj <Esc>
nnoremap <C-e> <cmd>Telescope find_files<cr>
nnoremap <C-F> <cmd>Telescope live_grep<cr>
nnoremap <C-a> :NERDTreeToggle<CR>
inoremap ( ()<left>
inoremap [ []<left>
inoremap { {}<left>
" Better nav for omnicomplete
inoremap <expr> <c-j> ("\<C-n>")
inoremap <expr> <c-k> ("\<C-p>")
nnoremap <TAB> :bnext<CR>
nnoremap <S-TAB> :bprevious<CR>
nnoremap <A-TAB> :bd<CR>
nnoremap <C-s> :w<CR>
nnoremap <C-q> :q<CR>


" Plugins
call plug#begin('~/.vim/plugged')
    " Rust
    Plug 'neovim/nvim-lspconfig' " Configurations for the Nvim LSP client
    Plug 'hrsh7th/nvim-cmp' " Completion framework
    Plug 'hrsh7th/cmp-nvim-lsp' " LSP completion source for nvim-cmp
    Plug 'hrsh7th/cmp-vsnip' " Snippet completion source for nvim-cmp
    Plug 'hrsh7th/cmp-path'
    Plug 'hrsh7th/cmp-buffer'
    Plug 'simrat39/rust-tools.nvim'
    Plug 'rust-lang/rust.vim'

    " Fuzzy finder
    Plug 'nvim-lua/plenary.nvim'
    Plug 'nvim-telescope/telescope.nvim'
    " File explorer
    Plug 'preservim/nerdtree'
    " Git 
    Plug 'tpope/vim-fugitive'
    " Theme
    Plug 'pineapplegiant/spaceduck', { 'branch': 'main' }
    " Syntax highlight
    Plug 'radenling/vim-dispatch-neovim'
    Plug 'sheerun/vim-polyglot'
    Plug 'aliev/vim-python'

call plug#end()

" Spaceduck theme
if exists('+termguicolors')
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
    set termguicolors
endif
colorscheme spaceduck

" Rust LSP configs
set signcolumn=yes
set updatetime=300
autocmd CursorHold * lua vim.lsp.diagnostic.show_line_diagnostics()

lua <<EOF
local nvim_lsp = require'lspconfig'

local opts = {
    tools = { -- rust-tools options
        autoSetHints = true,
        hover_with_actions = true,
        inlay_hints = {
            show_parameter_hints = false,
            parameter_hints_prefix = "",
            other_hints_prefix = "",
        },
    },

    -- all the opts to send to nvim-lspconfig
    -- these override the defaults set by rust-tools.nvim
    -- see https://github.com/neovim/nvim-lspconfig/blob/master/doc/server_configurations.md#rust_analyzer
    server = {
        -- on_attach is a callback called when the language server attachs to the buffer
        -- on_attach = on_attach,
        settings = {
            -- to enable rust-analyzer settings visit:
            -- https://github.com/rust-analyzer/rust-analyzer/blob/master/docs/user/generated_config.adoc
            ["rust-analyzer"] = {
                -- enable clippy on save
                checkOnSave = {
                    command = "clippy"
                },
            }
        }
    },
}

require('rust-tools').setup(opts)
EOF

" Setup Completion
" See https://github.com/hrsh7th/nvim-cmp#basic-configuration
lua <<EOF
local cmp = require'cmp'
cmp.setup({
  -- Enable LSP snippets
  snippet = {
    expand = function(args)
        vim.fn["vsnip#anonymous"](args.body)
    end,
  },
  mapping = {
    ['<C-p>'] = cmp.mapping.select_prev_item(),
    ['<C-n>'] = cmp.mapping.select_next_item(),
    -- Add tab support
    ['<S-Tab>'] = cmp.mapping.select_prev_item(),
    ['<Tab>'] = cmp.mapping.select_next_item(),
    ['<C-d>'] = cmp.mapping.scroll_docs(-4),
    ['<C-f>'] = cmp.mapping.scroll_docs(4),
    ['<C-Space>'] = cmp.mapping.complete(),
    ['<C-e>'] = cmp.mapping.close(),
    ['<CR>'] = cmp.mapping.confirm({
      behavior = cmp.ConfirmBehavior.Insert,
      select = true,
    })
  },

  -- Installed sources
  sources = {
    { name = 'nvim_lsp' },
    { name = 'vsnip' },
    { name = 'path' },
    { name = 'buffer' },
  },
})
EOF

" Specific plugin settings
let NERDTreeQuitOnOpen=1

